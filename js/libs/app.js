// Generated by CoffeeScript 1.3.3

/*
  Project: CurrencyConverter
  File: app.js
  Author : Vetri
*/


(function() {
  var CurrencyConverter, cc,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  CurrencyConverter = (function() {

    function CurrencyConverter() {
      this.showResults = __bind(this.showResults, this);

      this.getValues = __bind(this.getValues, this);

    }

    CurrencyConverter.prototype.init = function() {
      fx.base = "USD";
      fx.rates = {
        "EUR": 0.74510096,
        "GBP": 0.64771034,
        "HKD": 7.78191949,
        "USD": 1
      };
      this.countryFrom = $("#fromSelect");
      this.countryTo = $("#toSelect");
      this.keys = [];
      this.values = [];
      $.ajaxSetup({
        cache: false
      });
      this.getValues();
      return this.retrieveOpenExchangeData();
    };

    CurrencyConverter.prototype.retrieveOpenExchangeData = function() {
      var _this = this;
      return $.ajax({
        url: 'http://openexchangerates.org/latest.json',
        datatype: 'json',
        success: function(data) {
          var fxSetup, objData, timeStamp;
          objData = jQuery.parseJSON(data) || data;
          $(".noDataMsg").text("");
          if ((typeof fx !== "undefined" && fx !== null) && (fx.rates != null)) {
            fx.rates = objData.rates;
            fx.base = objData.base;
          } else {
            fxSetup = {
              rates: objData.rates,
              base: objData.base
            };
          }
          if (objData.timestamp) {
            timeStamp = _this.timeConverter(objData.timestamp);
            $(".timeStamp").text(timeStamp);
          }
          return _this.buildOptionsBox();
        },
        error: function(data) {
          return $(".noDataMsg").text("Please, try again later data couldn't be fetched now");
        }
      });
    };

    CurrencyConverter.prototype.timeConverter = function(timestamp) {
      var a, date, hour, min, month, months, sec, time, year;
      a = new Date(timestamp * 1000);
      months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
      year = a.getFullYear();
      month = months[a.getMonth()];
      date = a.getDate();
      hour = a.getHours();
      min = a.getMinutes();
      sec = a.getSeconds();
      return time = date + ', ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec;
    };

    CurrencyConverter.prototype.buildOptionsBox = function() {
      var data, i, key, objOption, sym, url, _i, _j, _len, _len1, _ref, _ref1,
        _this = this;
      url = 'js/currencies.json';
      data = window.currencies;
      for (key in data) {
        this.keys.push(key);
      }
      for (key in data) {
        this.values.push(data[key]);
      }
      _ref = this.keys;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        sym = _ref[i];
        objOption = document.createElement("option");
        objOption.text = this.keys[i] + "-" + this.values[i];
        objOption.value = this.keys[i];
        this.countryFrom.get(0).add(objOption, null);
      }
      _ref1 = this.keys;
      for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
        sym = _ref1[i];
        objOption = document.createElement("option");
        objOption.text = this.keys[i] + "-" + this.values[i];
        objOption.value = this.keys[i];
        this.countryTo.get(0).add(objOption, null);
      }
      this.countryFrom.hide().show();
      this.countryTo.hide().show();
      this.countryFrom.change(function() {
        _this.getValues();
        return _this.showResults();
      });
      this.countryTo.change(function() {
        _this.getValues();
        return _this.showResults();
      });
      $("#amount").keyup(function() {
        return setTimeout(_this.showResults(), 2);
      });
      $("#amount").change(function() {
        return _this.showResults();
      });
      return $("#go").click(function() {
        var fromText, toText;
        if (_this.fromValue === "CF" || _this.toValue === "CT") {
          return false;
        }
        _this.countryFrom.val(_this.toValue);
        _this.countryTo.val(_this.fromValue);
        fromText = _this.countryFrom.find('option:selected').text();
        toText = _this.countryTo.find('option:selected').text();
        _this.countryFrom.siblings('span').text(fromText);
        _this.countryTo.siblings('span').text(toText);
        _this.getValues();
        return _this.showResults();
      });
    };

    CurrencyConverter.prototype.getValues = function() {
      this.fromValue = $("#fromSelect").val();
      return this.toValue = $("#toSelect").val();
    };

    CurrencyConverter.prototype.showResults = function() {
      var args, params, str;
      this.amt = $("#amount").val();
      if (isNaN(this.amt) || this.amt === "") {
        return $("#result").text("Please enter a valid amount");
      } else if (this.fromValue === "CF") {
        return $("#result").text("Select from which currency u wanna convert");
      } else if (this.toValue === "CT") {
        return $("#result").text("Select to which currency u wanna convert");
      } else if (this.fromValue === "CF" && this.toValue === "CT") {
        return $("#result").text("Select from and to currrencies for convertion");
      } else {
        fx.settings = {
          from: this.fromValue,
          to: this.toValue
        };
        this.money = fx.convert(this.amt);
        str = this.money + "";
        if (str.indexOf("e") >= 0) {
          return $("#result").text(this.money(+" " + this.toValue));
        } else {
          params = {
            pos: "%v %s ",
            neg: "(%v) %s",
            zero: "-- %s"
          };
          args = {
            symbol: this.toValue,
            format: params
          };
          return $("#result").text(accounting.formatMoney(this.money, args));
        }
      }
    };

    return CurrencyConverter;

  })();

  cc = new CurrencyConverter();

  $(function() {
    if (navigator.onLine === true) {
      cc.init();
    } else {
      $(".noDataMsg").text("Please, connect to the internet and try again");
    }
    if (!$.browser.opera) {
      return $('select.select').each(function() {
        var title;
        title = $(this).attr('title');
        if ($('option:selected', this).val() !== '') {
          title = $('option:selected', this).text();
        }
        return $(this).css({
          'z-index': 10,
          'opacity': 0,
          '-khtml-appearance': 'none'
        }).after('<span class="select selectBg">' + title + '</span>').change(function() {
          var val;
          val = $('option:selected', this).text();
          return $(this).next().text(val);
        });
      });
    }
  });

}).call(this);
